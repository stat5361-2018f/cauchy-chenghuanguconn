knitr::opts_chunk$set(echo = TRUE)
require(data.table)
require(knitr)
## require(animation)
require(pracma)
require(ggplot2)
## require(spuRs)
## fixedpoint ## from spuRs
## require(copula)
## Function calculate Fixed Point Iteration estimates
FPI <- function(fn, x0, tol = .Machine$double.eps^0.5, maxiter = 100){
xold <- x0
xnew <- fn(xold)
iter <- 1
while ((abs(xnew - xold) > tol) && (iter < maxiter)) {
xold <- xnew
xnew <- fn(xold)
iter <- iter + 1
}
return(list(root = xnew, iter = iter))
}
## function: return result in datatable
rs <- function(alpha, start, ...){
return(data.table(alpha = alpha,
start = start,
estimates = FPI(..., x0 = start)$root,
iter.fpi = FPI(..., x0 = start)$iter))
}
alpha <- c(1, 0.64, 0.25)
for (i in alpha){
G <- function(x){
i * llk.1st(x) + x
}
for (j in start){
if(i == alpha[1] & j ==start[1]){
tble <- rs(i, j, G)
}else{
dt <- rs(i, j, G)
tble <- rbind(tble, dt)
}
}
}
knitr::opts_chunk$set(echo = TRUE)
require(data.table)
require(knitr)
## require(animation)
require(pracma)
require(ggplot2)
## require(spuRs)
## fixedpoint ## from spuRs
## require(copula)
set.seed(20180909)
n <- 10
par.loc <- 5
data.cauchy <- rcauchy(n, location = par.loc)
llk <- function(loc) {
sum(dcauchy(data.cauchy,
location = loc,
log = TRUE))
}
loglikelihood <- Vectorize(llk)
curve(loglikelihood, -20, 20, xname = 'loc')
require(ggplot2)
start <- seq(-10, 20, by=0.5)
# newton.method require(animation)
# newtonRaphson require(pracma)
llk.1st <- function(x) {
-2 * sum((x - data.cauchy)/(1 + (x - data.cauchy) ^ 2))
}
l1 <- Vectorize(llk.1st)
curve(l1, 0, 10, xname = 'loc')
llk.2nd <- function(x){
-2 * sum((1 - (x - data.cauchy) ^ 2)/((1 + (x - data.cauchy) ^ 2) ^ 2))
}
## l2 <- Vectorize(llk.2nd)
## curve(l2, -10, 20, xname = 'loc')
mle.nr <- double(length(start))
iter.nr <- double(length(start)) ## record iteration time
for (i in start){
NR <- newtonRaphson(fun = llk.1st, x0 = i, dfun = llk.2nd, maxiter = 100)
mle.nr[which(start == i)] <- NR$root
iter.nr[which(start == i)] <- NR$niter
}
dt <- data.table(start.value = start, mle = mle.nr, iter.nr = iter.nr)
ggplot(dt, aes(x=start, y=mle.nr)) + geom_point()
kable(dt)
## data.table(cn = names(dt), transpose(dt))
## Function calculate Fixed Point Iteration estimates
FPI <- function(fn, x0, tol = .Machine$double.eps^0.5, maxiter = 100){
xold <- x0
xnew <- fn(xold)
iter <- 1
while ((abs(xnew - xold) > tol) && (iter < maxiter)) {
xold <- xnew
xnew <- fn(xold)
iter <- iter + 1
}
return(list(root = xnew, iter = iter))
}
## function: return result in datatable
rs <- function(alpha, start, ...){
return(data.table(alpha = alpha,
start = start,
estimates = FPI(..., x0 = start)$root,
iter.fpi = FPI(..., x0 = start)$iter))
}
alpha <- c(1, 0.64, 0.25)
for (i in alpha){
G <- function(x){
i * llk.1st(x) + x
}
for (j in start){
if(i == alpha[1] & j ==start[1]){
tble <- rs(i, j, G)
}else{
dt <- rs(i, j, G)
tble <- rbind(tble, dt)
}
}
}
kable(tble)
## data.table(cn = names(tble), transpose(tble))
ggplot(tble, aes(x = start, y = estimates, col = alpha)) + geom_point()
## replace l''(theta) with -I(theta)
I <- function(x){
-length(data.cauchy)/2
}
mle.fs <- double(length(start))
mle.nt <- double(length(start))
itr.fs <- double(length(start))
itr.nt <- double(length(start))
for (i in start){
mle.fs[which(start == i)] = newtonRaphson(fun = llk.1st, x0 = i, dfun = I, maxiter = 100)$root
itr.fs[which(start == i)] = newtonRaphson(fun = llk.1st, x0 = i, dfun = I, maxiter = 100)$niter
mle.nt[which(start == i)] = newtonRaphson(fun = llk.1st, x0 = mle.fs[which(start == i)], dfun = llk.2nd, maxiter = 100)$root
itr.nt[which(start == i)] = newtonRaphson(fun = llk.1st, x0 = mle.fs[which(start == i)], dfun = llk.2nd, maxiter = 100)$niter
}
mle.nt
dt <- data.table(start.value = start, mle.fs = mle.fs, itr.fs = itr.fs, mle.nt = mle.nt, itr.nt = itr.nt)
kable(dt)
range(iter.nr)
range(tble$)
range(iter.nr)
range(tble$iter.fpi)
range(itr.fs)
range(itr.nt)
range(iter.nr) ## Newton–Raphson method
range(tble$iter.fpi) ## Fixed Point Iteration
range(itr.fs) ## Fisher Scoring
range(itr.nt) ## Newton–Raphson after Fisher Scoring
range(iter.nr) ## Newton–Raphson method
range(tble$iter.fpi) ## Fixed Point Iteration
range(itr.fs) ## Fisher Scoring
range(itr.nt) ## Newton–Raphson after Fisher Scoring
require(ggplot2)
start <- seq(-10, 20, by=0.5)
# newton.method require(animation)
# newtonRaphson require(pracma)
llk.1st <- function(x) {
-2 * sum((x - data.cauchy)/(1 + (x - data.cauchy) ^ 2))
}
l1 <- Vectorize(llk.1st)
curve(l1, 0, 10, xname = 'loc')
llk.2nd <- function(x){
-2 * sum((1 - (x - data.cauchy) ^ 2)/((1 + (x - data.cauchy) ^ 2) ^ 2))
}
## l2 <- Vectorize(llk.2nd)
## curve(l2, -10, 20, xname = 'loc')
mle.nr <- double(length(start))
iter.nr <- double(length(start)) ## record iteration time
for (i in start){
NR <- newtonRaphson(fun = llk.1st, x0 = i, dfun = llk.2nd, maxiter = 100)
mle.nr[which(start == i)] <- NR$root
iter.nr[which(start == i)] <- NR$niter
}
dt <- data.table(start.value = start, mle = mle.nr, iter.nr = iter.nr)
ggplot(dt, aes(x=start, y=mle.nr)) + geom_point()
kable(dt)
## data.table(cn = names(dt), transpose(dt))
